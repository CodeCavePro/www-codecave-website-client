{"version":3,"file":"component---src-templates-projects-tsx-955933597b8e809a18c6.js","mappings":"sJAOO,MAAMA,EAAkB,KAC7B,MAAMC,GAAcC,EAAAA,EAAAA,IAAeC,GAE7BC,GAAUC,EAAAA,EAAAA,GAASJ,EAAYK,KAAKC,iBAE1C,OACEC,EAAAA,cAAAA,EAAAA,SAAAA,KACGJ,EACCI,EAAAA,cAACC,EAAAA,EAAW,CACVC,MAAON,EACPO,IAAI,aACJC,UAAU,oCAEV,KACH,EA4BP,KAxBeC,IAQR,IARS,YACdC,EAAW,MACXC,EAAK,KACLC,GAKD,EACC,OACER,EAAAA,cAAAA,MAAAA,CACEI,UAAS,mDAAqDE,GAE9DN,EAAAA,cAACS,EAAAA,EAAgB,CACfL,UAAS,6DAETJ,EAAAA,cAACR,EAAe,MAChBQ,EAAAA,cAAAA,KAAAA,CAAII,UAAU,yCAAyCG,GACvDP,EAAAA,cAAAA,IAAAA,CAAGI,UAAU,2BAA2BI,IAEtC,EAMH,MAAMb,EAAK,W,wDCGlB,IAhDmBU,IAUZ,IAVa,QAClBK,EAAO,cACPC,EAAa,YACbC,EAAW,UACXR,GAMD,EACC,MAAMS,EAAQC,MAAMC,KAAK,CAAEC,OAAQL,IAAiB,CAACM,EAAGC,IAAMA,EAAI,IAC5DC,EAAWP,EAAc,EAE/B,OACEZ,EAAAA,cAAAA,MAAAA,CAAKI,UAAS,gCAAkCA,GAC9CJ,EAAAA,cAAAA,MAAAA,CAAKI,UAAU,kFACZQ,EAAcD,EACbX,EAAAA,cAACoB,EAAAA,GAAI,CAACC,GAAE,IAAMX,EAAO,IAAIS,GACvBnB,EAAAA,cAACsB,EAAAA,EAAM,CAACC,KAAK,QAAQC,QAAQ,OAAOpB,UAAU,SAAQ,cAItD,MAENJ,EAAAA,cAAAA,MAAAA,CAAKI,UAAU,qDACZO,EAAgB,EACbE,EAAMY,KAAKC,GACT1B,EAAAA,cAACoB,EAAAA,GAAI,CACHO,IAAG,mBAAqBD,EACxBL,GAAE,IAAMX,EAAO,KAAa,IAATgB,EAAa,GAAKA,IAErC1B,EAAAA,cAACsB,EAAAA,EAAM,CACLC,KAAK,QACLC,QAASE,IAASd,EAAc,OAAS,QACzCgB,OAAQF,IAASd,EACjBR,UAAU,aAETsB,MAIP,MAEF,C,sHCDV,UArCiBrB,IAGyC,IAHxC,KAChBwB,EAAI,YACJC,GACmD,EACnD,MAAMC,EAAWF,EAAKG,kBAAkBC,OAClC,YAAErB,EAAW,cAAED,GAAkBmB,EAEvC,OACE9B,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAACkC,EAAAA,GAAM,CACL5B,YAAY,OACZC,MAAM,oBACNC,KAAK,+BAEPR,EAAAA,cAACS,EAAAA,EAAgB,CAACL,UAAU,8BAC1BJ,EAAAA,cAAAA,MAAAA,CAAKI,UAAU,iCACZ2B,EACGA,EAASN,KAAKU,GACZnC,EAAAA,cAACoC,EAAAA,EAAc,CACbT,IAAKQ,EAAQE,GACbF,QAASA,EACTG,MAAM,OACNlC,UAAU,2CAGd,MAENJ,EAAAA,cAACuC,EAAAA,EAAU,CACT7B,QAAS,WACTC,cAAeA,EACfC,YAAaA,KAGhB,EAMA,MAAM4B,EAAe,IAAMxC,EAAAA,cAAAA,QAAAA,KAAO,oB","sources":["webpack://code-cave/./src/components/banner.tsx","webpack://code-cave/./src/components/pagination.tsx","webpack://code-cave/./src/templates/projects.tsx"],"sourcesContent":["import React from \"react\";\n\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\n\nimport ContentContainer from \"./contentContainer\";\n\nexport const BackgroundImage = () => {\n  const bgImageData = useStaticQuery(query);\n\n  const bgImage = getImage(bgImageData.file.childImageSharp);\n\n  return (\n    <>\n      {bgImage ? (\n        <GatsbyImage\n          image={bgImage}\n          alt=\"background\"\n          className=\"absolute left-1/3 h-full w-full\"\n        />\n      ) : null}\n    </>\n  );\n};\n\nconst Banner = ({\n  heightClass,\n  title,\n  text,\n}: {\n  heightClass: string;\n  title: string;\n  text: string;\n}) => {\n  return (\n    <div\n      className={`w-full bg-secondary-70 relative overflow-hidden ${heightClass}`}\n    >\n      <ContentContainer\n        className={`h-full flex-col items-left justify-center overflow-hidden`}\n      >\n        <BackgroundImage />\n        <h2 className=\"text-bold text-7xl text-main-100 mb-8\">{title}</h2>\n        <p className=\"max-w-xl w-full text-lg\">{text}</p>\n      </ContentContainer>\n    </div>\n  );\n};\n\nexport default Banner;\n\nexport const query = graphql`\n  query {\n    file(sourceInstanceName: { eq: \"common\" }, name: { eq: \"banner\" }) {\n      childImageSharp {\n        gatsbyImageData(formats: [AUTO, AVIF, WEBP], placeholder: BLURRED)\n      }\n    }\n  }\n`;\n","import React from \"react\";\n\nimport { Link } from \"gatsby\";\n\nimport Button from \"./button\";\n\nconst Pagination = ({\n  section,\n  pagesQuantity,\n  currentPage,\n  className,\n}: {\n  section: \"projects\" | \"blog\";\n  pagesQuantity: number;\n  currentPage: number;\n  className?: string;\n}) => {\n  const pages = Array.from({ length: pagesQuantity }, (_, i) => i + 1);\n  const nextPage = currentPage + 1;\n\n  return (\n    <div className={`my-8 grid grid-cols-3 w-full ${className}`}>\n      <div className=\"col-start-1 col-span-2 lg:col-start-2 lg:col-span-1 w-full flex justify-center\">\n        {currentPage < pagesQuantity ? (\n          <Link to={`/${section}/${nextPage}`}>\n            <Button size=\"large\" variant=\"dark\" className=\"w-max\">\n              Next page\n            </Button>\n          </Link>\n        ) : null}\n      </div>\n      <nav className=\"col-start-3 col-span-1 w-full flex justify-center\">\n        {pagesQuantity > 1\n          ? pages.map((page) => (\n              <Link\n                key={`pagination-link-${page}`}\n                to={`/${section}/${page === 1 ? \"\" : page}`}\n              >\n                <Button\n                  size=\"small\"\n                  variant={page === currentPage ? \"dark\" : \"light\"}\n                  border={page !== currentPage}\n                  className=\"mx-[-1px]\"\n                >\n                  {page}\n                </Button>\n              </Link>\n            ))\n          : null}\n      </nav>\n    </div>\n  );\n};\n\nexport default Pagination;\n","import React from \"react\";\n\nimport { HeadFC, PageProps } from \"gatsby\";\nimport { graphql } from \"gatsby\";\n\nimport { IProjectsPageContext, IProjectsPageData } from \"../types/project.type\";\n\nimport Banner from \"../components/banner\";\nimport ContentContainer from \"../components/contentContainer\";\nimport ProjectPreview from \"../components/projectPreview\";\nimport Pagination from \"../components/pagination\";\n\nconst Projects = ({\n  data,\n  pageContext,\n}: PageProps<IProjectsPageData, IProjectsPageContext>) => {\n  const projects = data.allMarkdownRemark.nodes;\n  const { currentPage, pagesQuantity } = pageContext;\n\n  return (\n    <>\n      <Banner\n        heightClass=\"h-96\"\n        title=\"CodeCave projects\"\n        text=\"Our super amazing projects\"\n      />\n      <ContentContainer className=\"flex-col items-center p-12\">\n        <div className=\"flex flex-wrap justify-center\">\n          {projects\n            ? projects.map((project) => (\n                <ProjectPreview\n                  key={project.id}\n                  project={project}\n                  theme=\"dark\"\n                  className=\"basis-full md:basis-3/4 lg:basis-2/5\"\n                />\n              ))\n            : null}\n        </div>\n        <Pagination\n          section={\"projects\"}\n          pagesQuantity={pagesQuantity}\n          currentPage={currentPage}\n        />\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default Projects;\n\nexport const Head: HeadFC = () => <title>CodeCave Projects</title>;\n\nexport const query = graphql`\n  query ($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      filter: { fields: { sourceName: { eq: \"projects\" } } }\n      sort: { frontmatter: { date: DESC } }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        id\n        frontmatter {\n          date(formatString: \"MMM DD, YYYY\")\n          title\n          text\n          stack\n          cover {\n            childImageSharp {\n              gatsbyImageData(\n                formats: [AUTO, WEBP, AVIF]\n                placeholder: BLURRED\n                width: 600\n              )\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["BackgroundImage","bgImageData","useStaticQuery","query","bgImage","getImage","file","childImageSharp","React","GatsbyImage","image","alt","className","_ref","heightClass","title","text","ContentContainer","section","pagesQuantity","currentPage","pages","Array","from","length","_","i","nextPage","Link","to","Button","size","variant","map","page","key","border","data","pageContext","projects","allMarkdownRemark","nodes","Banner","project","ProjectPreview","id","theme","Pagination","Head"],"sourceRoot":""}