{"version":3,"file":"component---src-templates-blog-tsx-31351f94a70adcc5b2da.js","mappings":"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","sources":["webpack://code-cave/./src/components/banner.tsx","webpack://code-cave/./src/components/pagination.tsx","webpack://code-cave/./src/components/postPreview.tsx","webpack://code-cave/./src/templates/blog.tsx"],"sourcesContent":["import React from \"react\";\n\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\n\nimport ContentContainer from \"./contentContainer\";\n\nexport const BackgroundImage = () => {\n  const bgImageData = useStaticQuery(query);\n\n  const bgImage = getImage(bgImageData.file.childImageSharp);\n\n  return (\n    <>\n      {bgImage ? (\n        <GatsbyImage\n          image={bgImage}\n          alt=\"background\"\n          className=\"absolute left-1/3 h-full w-full\"\n        />\n      ) : null}\n    </>\n  );\n};\n\nconst Banner = ({\n  heightClass,\n  title,\n  text,\n}: {\n  heightClass: string;\n  title: string;\n  text: string;\n}) => {\n  return (\n    <div\n      className={`w-full bg-secondary-70 relative overflow-hidden ${heightClass}`}\n    >\n      <ContentContainer\n        className={`h-full flex-col items-left justify-center overflow-hidden`}\n      >\n        <BackgroundImage />\n        <h2 className=\"text-bold text-7xl text-main-100 mb-8\">{title}</h2>\n        <p className=\"max-w-xl w-full text-lg\">{text}</p>\n      </ContentContainer>\n    </div>\n  );\n};\n\nexport default Banner;\n\nexport const query = graphql`\n  query {\n    file(sourceInstanceName: { eq: \"common\" }, name: { eq: \"banner\" }) {\n      childImageSharp {\n        gatsbyImageData(formats: [AUTO, AVIF, WEBP], placeholder: BLURRED)\n      }\n    }\n  }\n`;\n","import React from \"react\";\n\nimport { Link } from \"gatsby\";\n\nimport Button from \"./button\";\n\nconst Pagination = ({\n  section,\n  pagesQuantity,\n  currentPage,\n  className,\n}: {\n  section: \"projects\" | \"blog\";\n  pagesQuantity: number;\n  currentPage: number;\n  className?: string;\n}) => {\n  const pages = Array.from({ length: pagesQuantity }, (_, i) => i + 1);\n  const nextPage = currentPage + 1;\n\n  return (\n    <div className={`my-8 grid grid-cols-3 w-full ${className}`}>\n      <div className=\"col-start-1 col-span-2 lg:col-start-2 lg:col-span-1 w-full flex justify-center\">\n        {currentPage < pagesQuantity ? (\n          <Link to={`/${section}/${nextPage}`}>\n            <Button size=\"large\" variant=\"dark\" className=\"w-max\">\n              Next page\n            </Button>\n          </Link>\n        ) : null}\n      </div>\n      <nav className=\"col-start-3 col-span-1 w-full flex justify-center\">\n        {pagesQuantity > 1\n          ? pages.map((page) => (\n              <Link\n                key={`pagination-link-${page}`}\n                to={`/${section}/${page === 1 ? \"\" : page}`}\n              >\n                <Button\n                  size=\"small\"\n                  variant={page === currentPage ? \"dark\" : \"light\"}\n                  border={page !== currentPage}\n                  className=\"mx-[-1px]\"\n                >\n                  {page}\n                </Button>\n              </Link>\n            ))\n          : null}\n      </nav>\n    </div>\n  );\n};\n\nexport default Pagination;\n","import React from \"react\";\n\nimport { Link } from \"gatsby\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\n\nimport { IPostPreviewQueryResult } from \"../types/post.type\";\n\nconst PostPreview = ({\n  post,\n  className,\n  fontColor,\n}: {\n  post: IPostPreviewQueryResult;\n  className?: string;\n  fontColor: \"main\" | \"secondary\";\n}) => {\n  const cover = getImage(post.frontmatter.cover);\n  const { date, title, text } = post.frontmatter;\n\n  const fontColorClass100 =\n    fontColor === \"main\" ? \"text-main-100\" : \"text-secondary-100\";\n  const fontColorClass10 =\n    fontColor === \"main\" ? \"text-main-10\" : \"text-secondary-10\";\n  const fontColorHover =\n    fontColor === \"main\" ? \"hover:text-main-100\" : \"hover:text-secondary-100\";\n\n  return (\n    <Link\n      to={`/blog/post/${post.id}`}\n      className={`flex w-full ${fontColorClass10} ${fontColorHover} ${className}`}\n    >\n      <div className=\"hidden md:flex md:basis-1/3 shrink-0\">\n        {cover ? <GatsbyImage image={cover} alt={title} /> : null}\n      </div>\n      <div className=\"p-8 pl-12 flex flex-col basis-1/2 md:basis-1/3 shrink-0\">\n        <p className={`text-xl ${fontColorClass10} pb-8`}>{date}</p>\n        <h3 className={`text-4xl ${fontColorClass100}`}> {title} </h3>\n      </div>\n      <div className=\"flex flex-col justify-center basis-1/2 md:basis-1/3 shrink-0\">\n        <p className={`text-xl ${fontColorClass10} pb-3`}>\n          {text.split(\" \").slice(0, 40).join(\" \")}...\n        </p>\n        <p className={`text-xl`}>READ MORE &#8594;</p>\n      </div>\n    </Link>\n  );\n};\n\nexport default PostPreview;\n","import React from \"react\";\n\nimport { HeadFC, PageProps } from \"gatsby\";\nimport { graphql } from \"gatsby\";\n\nimport { IBlogPageData, IBlogPageContext } from \"../types/blog.type\";\n\nimport Banner from \"../components/banner\";\nimport ContentContainer from \"../components/contentContainer\";\nimport PostPreview from \"../components/postPreview\";\nimport Pagination from \"../components/pagination\";\n\nconst Blog = ({\n  data,\n  pageContext,\n}: PageProps<IBlogPageData, IBlogPageContext>) => {\n  const posts = data.allMarkdownRemark.nodes;\n  const { currentPage, pagesQuantity } = pageContext;\n\n  return (\n    <>\n      <Banner\n        heightClass=\"h-96\"\n        title=\"CodeCave blog\"\n        text=\"Awesome blog provides important information for you\"\n      />\n      <ContentContainer className=\"flex-col items-center p-12\">\n        {posts\n          ? posts.map((post) => (\n              <PostPreview\n                key={post.id}\n                post={post}\n                fontColor=\"main\"\n                className=\"py-5 border-t-2 first:border-t-0 border-solid border-main-100\"\n              />\n            ))\n          : null}\n        <Pagination\n          section={\"blog\"}\n          pagesQuantity={pagesQuantity}\n          currentPage={currentPage}\n        />\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default Blog;\n\nexport const Head: HeadFC = () => <title>CodeCave Blog</title>;\n\nexport const query = graphql`\n  query ($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      filter: { fields: { sourceName: { eq: \"posts\" } } }\n      sort: { frontmatter: { date: DESC } }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        id\n        frontmatter {\n          date(formatString: \"MMM DD, YYYY\")\n          author\n          title\n          text\n          cover {\n            childImageSharp {\n              gatsbyImageData(\n                formats: [AUTO, WEBP, AVIF]\n                placeholder: BLURRED\n                width: 600\n              )\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["BackgroundImage","bgImageData","useStaticQuery","query","bgImage","getImage","file","childImageSharp","React","GatsbyImage","image","alt","className","_ref","heightClass","title","text","ContentContainer","section","pagesQuantity","currentPage","pages","Array","from","length","_","i","nextPage","Link","to","Button","size","variant","map","page","key","border","post","fontColor","cover","frontmatter","date","fontColorClass100","fontColorClass10","fontColorHover","id","split","slice","join","data","pageContext","posts","allMarkdownRemark","nodes","Banner","PostPreview","Pagination","Head"],"sourceRoot":""}